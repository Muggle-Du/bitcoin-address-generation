// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package btckeys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BtcKeysClient is the client API for BtcKeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BtcKeysClient interface {
	DeriveBech32AddressFromXpub(ctx context.Context, in *DerivationRequest, opts ...grpc.CallOption) (*Address, error)
	GetMultiSigAddress(ctx context.Context, in *MultiSigRequest, opts ...grpc.CallOption) (*MultiSigResponse, error)
}

type btcKeysClient struct {
	cc grpc.ClientConnInterface
}

func NewBtcKeysClient(cc grpc.ClientConnInterface) BtcKeysClient {
	return &btcKeysClient{cc}
}

func (c *btcKeysClient) DeriveBech32AddressFromXpub(ctx context.Context, in *DerivationRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/btckeys.BtcKeys/DeriveBech32AddressFromXpub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcKeysClient) GetMultiSigAddress(ctx context.Context, in *MultiSigRequest, opts ...grpc.CallOption) (*MultiSigResponse, error) {
	out := new(MultiSigResponse)
	err := c.cc.Invoke(ctx, "/btckeys.BtcKeys/GetMultiSigAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtcKeysServer is the server API for BtcKeys service.
// All implementations must embed UnimplementedBtcKeysServer
// for forward compatibility
type BtcKeysServer interface {
	DeriveBech32AddressFromXpub(context.Context, *DerivationRequest) (*Address, error)
	GetMultiSigAddress(context.Context, *MultiSigRequest) (*MultiSigResponse, error)
	mustEmbedUnimplementedBtcKeysServer()
}

// UnimplementedBtcKeysServer must be embedded to have forward compatible implementations.
type UnimplementedBtcKeysServer struct {
}

func (UnimplementedBtcKeysServer) DeriveBech32AddressFromXpub(context.Context, *DerivationRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveBech32AddressFromXpub not implemented")
}
func (UnimplementedBtcKeysServer) GetMultiSigAddress(context.Context, *MultiSigRequest) (*MultiSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiSigAddress not implemented")
}
func (UnimplementedBtcKeysServer) mustEmbedUnimplementedBtcKeysServer() {}

// UnsafeBtcKeysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BtcKeysServer will
// result in compilation errors.
type UnsafeBtcKeysServer interface {
	mustEmbedUnimplementedBtcKeysServer()
}

func RegisterBtcKeysServer(s grpc.ServiceRegistrar, srv BtcKeysServer) {
	s.RegisterService(&BtcKeys_ServiceDesc, srv)
}

func _BtcKeys_DeriveBech32AddressFromXpub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DerivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcKeysServer).DeriveBech32AddressFromXpub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btckeys.BtcKeys/DeriveBech32AddressFromXpub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcKeysServer).DeriveBech32AddressFromXpub(ctx, req.(*DerivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtcKeys_GetMultiSigAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcKeysServer).GetMultiSigAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btckeys.BtcKeys/GetMultiSigAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcKeysServer).GetMultiSigAddress(ctx, req.(*MultiSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BtcKeys_ServiceDesc is the grpc.ServiceDesc for BtcKeys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BtcKeys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "btckeys.BtcKeys",
	HandlerType: (*BtcKeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeriveBech32AddressFromXpub",
			Handler:    _BtcKeys_DeriveBech32AddressFromXpub_Handler,
		},
		{
			MethodName: "GetMultiSigAddress",
			Handler:    _BtcKeys_GetMultiSigAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "btckeys.proto",
}
